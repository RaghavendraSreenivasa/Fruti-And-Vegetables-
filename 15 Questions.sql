use fruit_vegetables;

-- Hereâ€™s a list of 15 SQL questions ranging from easy to advanced

-- 1. Retrieve the total quantity sold for each product.

SELECT ProductID, ProductName, SUM(Quantity_sold) AS Total_Quantity_Sold
FROM sales_table
GROUP BY ProductID, ProductName;

-- 2. Find the total sales revenue generated by each product category (Fruits and Vegetables).

SELECT category, SUM(Total_price) AS Total_Revenue
FROM sales_table
GROUP BY category;

-- 3. List the top 5 products with the highest total sales revenue.

SELECT ProductName, SUM(Total_price) AS Total_Revenue
FROM sales_table
GROUP BY ProductName
ORDER BY Total_Revenue DESC
LIMIT 5;

-- 4. Get the names of customers who purchased more than 3 kilograms of any product in a single transaction.

SELECT DISTINCT concat(c.first_name,' ',c.last_name) AS CustomerName
FROM sales_table s
JOIN customers c ON s.CustomerID = c.Customer_ID
WHERE s.Quantity_sold > 3;

-- 5. Find the products that have never been sold.

SELECT ProductName
FROM product_table
WHERE ProductID NOT IN (SELECT ProductID FROM sales_table);

-- 6. Identify the top 3 customers who have spent the most on purchases.

SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS CustomerName, 
    SUM(s.Total_price) AS Total_Spent
FROM 
    sales_table s
JOIN 
    customers c 
ON 
    s.CustomerID = c.Customer_ID
GROUP BY 
    c.first_name, c.last_name
ORDER BY 
    Total_Spent DESC
LIMIT 3;

-- 7. Calculate the average sales revenue per transaction for each product.

SELECT ProductName, AVG(Total_price) AS Avg_Revenue_Per_Transaction
FROM sales_table
GROUP BY ProductName;

-- 8. Find the supplier who provides the most products by count.

SELECT Supplier_ID, COUNT(*) AS Product_Count
FROM product_table
GROUP BY Supplier_ID
ORDER BY Product_Count DESC
LIMIT 1;

-- 9. Find the monthly sales revenue for the year 2025.

SELECT 
    DATE_FORMAT(sales_date, '%Y-%m') AS Month, 
    SUM(Total_price) AS Monthly_Revenue
FROM 
    sales_table
WHERE 
    YEAR(sales_date) = 2025
GROUP BY 
    Month
ORDER BY 
    Month;

-- 10.Retrieve the products sold by more than 2 different customers.

SELECT ProductName, COUNT(DISTINCT CustomerID) AS Unique_Customers
FROM sales_table
GROUP BY ProductName
HAVING Unique_Customers > 2;

-- 11. Determine which product had the largest spike in sales (quantity sold) between any two consecutive months.

SELECT ProductName, DATE_FORMAT(sales_date, '%Y-%m') AS Month, SUM(Quantity_sold) AS Total_Sold
FROM sales_table
GROUP BY ProductName, Month
ORDER BY ProductName, Month;

-- 12. Calculate the customer retention rate (percentage of customers who made repeat purchases).

WITH Customer_Purchases AS (
    SELECT CustomerID, COUNT(DISTINCT sales_date) AS Purchase_Count
    FROM sales_table
    GROUP BY CustomerID
)
SELECT 
    (COUNT(CASE WHEN Purchase_Count > 1 THEN 1 END) / COUNT(*)) * 100 AS Retention_Rate
FROM Customer_Purchases;


-- 13. Identify the most popular supplier by revenue generated from their products.

SELECT p.Supplier_ID, SUM(s.Total_price) AS Total_Revenue
FROM sales_table s
JOIN product_table p ON s.ProductID = p.ProductID
GROUP BY p.Supplier_ID
ORDER BY Total_Revenue DESC
LIMIT 1;

-- 14. List the top 3 most sold products in each category.

SELECT category, ProductName, SUM(Quantity_sold) AS Total_Sold
FROM sales_table
GROUP BY category, ProductName
ORDER BY category, Total_Sold DESC;

-- 15. Forecast next month's sales using a simple trend based on the last 3 months of sales.

-- Step 1: Aggregate sales data by product and month
WITH MonthlySales AS (
    SELECT 
        ProductName,
        DATE_FORMAT(sales_date, '%Y-%m') AS SalesMonth,
        SUM(Quantity_sold) AS Monthly_Sales
    FROM 
        sales_table
    GROUP BY 
        ProductName, DATE_FORMAT(sales_date, '%Y-%m')
)

-- Step 2: Calculate a 3-month moving average for each product
SELECT 
    ProductName,
    SalesMonth,
    AVG(Monthly_Sales) OVER (
        PARTITION BY ProductName 
        ORDER BY SalesMonth 
        ROWS 2 PRECEDING
    ) AS Forecasted_Sales
FROM 
    MonthlySales;

